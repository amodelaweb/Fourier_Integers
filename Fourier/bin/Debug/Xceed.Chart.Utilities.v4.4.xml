<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>Xceed.Chart.Utilities.v4.4</name>
  </assembly>
  <members>
    <member name="T:Xceed.Chart.Utilities.MeasurementUnit">
      <summary>Defines the possible measurement units</summary>
    </member>
    <member name="F:Xceed.Chart.Utilities.MeasurementUnit.Pixels">
      <summary>This member is reserved for internal use and is not intended to be used directly from your code.</summary>
    </member>
    <member name="F:Xceed.Chart.Utilities.MeasurementUnit.Millimeters">
      <summary>This member is reserved for internal use and is not intended to be used directly from your code.</summary>
    </member>
    <member name="F:Xceed.Chart.Utilities.MeasurementUnit.Centimeters">
      <summary>This member is reserved for internal use and is not intended to be used directly from your code.</summary>
    </member>
    <member name="F:Xceed.Chart.Utilities.MeasurementUnit.Inches">
      <summary>This member is reserved for internal use and is not intended to be used directly from your code.</summary>
    </member>
    <member name="T:Xceed.Chart.Utilities.ValueFormat">
      <summary>Used to controls the formatting of the value.</summary>
    </member>
    <member name="F:Xceed.Chart.Utilities.ValueFormat.CustomNumber">
      <summary>The value is formatted using a user specified custom number format string</summary>
    </member>
    <member name="F:Xceed.Chart.Utilities.ValueFormat.CustomDateTime">
      <summary>The value is formatted using a user specified custom date time format string</summary>
    </member>
    <member name="F:Xceed.Chart.Utilities.ValueFormat.Default">
      <summary>The value is formatted with the default locale settings</summary>
    </member>
    <member name="F:Xceed.Chart.Utilities.ValueFormat.Currency">
      <summary>The value is formatted with the default locale currency format</summary>
    </member>
    <member name="F:Xceed.Chart.Utilities.ValueFormat.Scientific">
      <summary>The value is formatted with the default locale scientific format</summary>
    </member>
    <member name="F:Xceed.Chart.Utilities.ValueFormat.Percentage">
      <summary>The value is formatted as a percentage</summary>
    </member>
    <member name="F:Xceed.Chart.Utilities.ValueFormat.Date">
      <summary>The value is formatted with the default locale short date format</summary>
    </member>
    <member name="F:Xceed.Chart.Utilities.ValueFormat.LongDate">
      <summary>The value is formatted with the default locale long date format</summary>
    </member>
    <member name="F:Xceed.Chart.Utilities.ValueFormat.Time">
      <summary>The value is formatted with the default locale time format</summary>
    </member>
    <member name="F:Xceed.Chart.Utilities.ValueFormat.DateTime">
      <summary>The value is formatted with the default locale date time format</summary>
    </member>
    <member name="T:Xceed.Chart.Utilities.KeyValuePair">
      <summary>This member is reserved for internal use and is not intended to be used directly from your code.</summary>
    </member>
    <member name="M:Xceed.Chart.Utilities.KeyValuePair.#ctor(System.String,System.String)">
      <summary>This member is reserved for internal use and is not intended to be used directly from your code.</summary>
    </member>
    <member name="F:Xceed.Chart.Utilities.KeyValuePair.Key">
      <summary>This member is reserved for internal use and is not intended to be used directly from your code.</summary>
    </member>
    <member name="F:Xceed.Chart.Utilities.KeyValuePair.Value">
      <summary>This member is reserved for internal use and is not intended to be used directly from your code.</summary>
    </member>
    <member name="T:Xceed.Chart.Utilities.History">
      <summary>The main history recorder which can be used to embed history functionality in our applications</summary>
    </member>
    <member name="T:Xceed.Chart.Utilities.HistoryOperationStack">
      <summary>General purpose history stack</summary>
    </member>
    <member name="T:Xceed.Chart.Utilities.MeasureUnitConverter">
      <summary>Represents a helper class for converting values from one measure unit to another.</summary>
    </member>
    <member name="T:Xceed.Chart.Utilities.RebindableArrayList">
      <summary>An override of the TypedArrayList which adds support for object binding</summary>
    </member>
    <member name="T:Xceed.Chart.Utilities.TypedArrayList">
      <summary>An override of the standard ArrayList with typed operations for manipulation of double and int values.</summary>
    </member>
    <member name="T:Xceed.Chart.Utilities.ValueFormatting">
      <summary>The ValueFormatting class implements value formatting functionality.</summary>
    </member>
    <member name="T:Xceed.Chart.Utilities.XmlNodeWriter">
      <summary>XmlNodeWriter builds a tree of XmlNodes based on the XmlWriter methods that are called.</summary>
    </member>
    <member name="M:Xceed.Chart.Utilities.History.CanRedo">
      <summary>Determines whether the user can perform Redo</summary>
    </member>
    <member name="M:Xceed.Chart.Utilities.History.CanUndo">
      <summary>Determines whether the user can perform Undo</summary>
    </member>
    <member name="M:Xceed.Chart.Utilities.History.Clear">
      <summary>Clears the currently recorded history</summary>
    </member>
    <member name="M:Xceed.Chart.Utilities.History.DumpToListBoxes(System.Windows.Forms.ListBox,System.Windows.Forms.ListBox)">
      <summary>Exports the undo and redo stacks in ListBox instances</summary>
    </member>
    <member name="M:Xceed.Chart.Utilities.History.DumpToTrees(System.Windows.Forms.TreeView,System.Windows.Forms.TreeView)">
      <summary>Exports the undo and redo stacks in TreeView instances</summary>
      <param name="undoTree">tree for Undo operations</param>
      <param name="redoTree">tree for Redo operations</param>
    </member>
    <member name="M:Xceed.Chart.Utilities.History.EndBatch">
      <summary>Ends the last batch</summary>
    </member>
    <member name="M:Xceed.Chart.Utilities.History.RecordFieldChange(Xceed.Chart.Utilities.IHistoryTarget,System.String)">
      <summary>Records a single field change of a history target</summary>
    </member>
    <member name="M:Xceed.Chart.Utilities.History.RecordNestedFieldChange(Xceed.Chart.Utilities.IHistoryTarget,System.String[],System.String)">
      <summary>Records a single property change of a history target nested object field</summary>
    </member>
    <member name="M:Xceed.Chart.Utilities.History.RecordNestedStateChange(Xceed.Chart.Utilities.IHistoryTarget,System.String[])">
      <summary>Records the entire state of a history target nested object</summary>
    </member>
    <member name="M:Xceed.Chart.Utilities.History.RecordPropertyChange(Xceed.Chart.Utilities.IHistoryTarget,System.String,Xceed.Chart.Utilities.FieldCategory)">
      <summary>Records a single property change of a history target</summary>
    </member>
    <member name="M:Xceed.Chart.Utilities.History.RecordStateChange(Xceed.Chart.Utilities.IHistoryTarget)">
      <summary>Records the entire state of a history target</summary>
    </member>
    <member name="M:Xceed.Chart.Utilities.History.Redo">
      <summary>Performs a Redo operation</summary>
    </member>
    <member name="M:Xceed.Chart.Utilities.History.Reset">
      <summary>Clears the currently recorded history and initializes the default Suspend and InternalSuspend settings</summary>
    </member>
    <member name="M:Xceed.Chart.Utilities.History.RollbackBatch">
      <summary>Discards all operations added to the last batch and removes it.</summary>
    </member>
    <member name="M:Xceed.Chart.Utilities.History.SetGUIDPool(Xceed.Chart.Utilities.IHistoryGUIDPool)">
      <summary>Attaches the history to a Guid pool</summary>
    </member>
    <member name="M:Xceed.Chart.Utilities.History.StartBatch(System.String)">
      <summary>Starts a batch</summary>
    </member>
    <member name="M:Xceed.Chart.Utilities.History.StartSingleTargetBatch(Xceed.Chart.Utilities.IHistoryTarget,System.String)">
      <summary>Starts a single batch</summary>
    </member>
    <member name="M:Xceed.Chart.Utilities.History.StartSingleTargetNestedBatch(Xceed.Chart.Utilities.IHistoryTarget,System.String[],System.String)">
      <summary>Starts a single batch</summary>
    </member>
    <member name="M:Xceed.Chart.Utilities.History.StartTargetAdded(Xceed.Chart.Utilities.IHistoryTarget,Xceed.Chart.Utilities.IHistoryTargetCollection,System.String)">
      <summary>Records a target added event</summary>
    </member>
    <member name="M:Xceed.Chart.Utilities.History.StartTargetDeleted(Xceed.Chart.Utilities.IHistoryTarget,Xceed.Chart.Utilities.IHistoryTargetCollection,System.String)">
      <summary>Records a target deleted event</summary>
    </member>
    <member name="M:Xceed.Chart.Utilities.History.Undo">
      <summary>Performs a Undo operation</summary>
    </member>
    <member name="P:Xceed.Chart.Utilities.History.InternalSuspend">
      <summary>Suspends history recording</summary>
    </member>
    <member name="P:Xceed.Chart.Utilities.History.Suspend">
      <summary>Suspends history recording</summary>
    </member>
    <member name="P:Xceed.Chart.Utilities.History.UndoLevels">
      <summary>Controls the depth of undo history recording</summary>
    </member>
    <member name="F:Xceed.Chart.Utilities.History.s_sBatch">
      <summary>This member is reserved for internal use and is not intended to be used directly from your code.</summary>
    </member>
    <member name="F:Xceed.Chart.Utilities.History.s_sCategory">
      <summary>This member is reserved for internal use and is not intended to be used directly from your code.</summary>
    </member>
    <member name="F:Xceed.Chart.Utilities.History.s_sChange">
      <summary>This member is reserved for internal use and is not intended to be used directly from your code.</summary>
    </member>
    <member name="F:Xceed.Chart.Utilities.History.s_sField">
      <summary>This member is reserved for internal use and is not intended to be used directly from your code.</summary>
    </member>
    <member name="F:Xceed.Chart.Utilities.History.s_sFieldChangeField">
      <summary>This member is reserved for internal use and is not intended to be used directly from your code.</summary>
    </member>
    <member name="F:Xceed.Chart.Utilities.History.s_sNestedField">
      <summary>This member is reserved for internal use and is not intended to be used directly from your code.</summary>
    </member>
    <member name="F:Xceed.Chart.Utilities.History.s_sNestedProperty">
      <summary>This member is reserved for internal use and is not intended to be used directly from your code.</summary>
    </member>
    <member name="F:Xceed.Chart.Utilities.History.s_sProperty">
      <summary>This member is reserved for internal use and is not intended to be used directly from your code.</summary>
    </member>
    <member name="F:Xceed.Chart.Utilities.History.s_sPropertyField">
      <summary>This member is reserved for internal use and is not intended to be used directly from your code.</summary>
    </member>
    <member name="F:Xceed.Chart.Utilities.History.s_sSingleTargetBatch">
      <summary>This member is reserved for internal use and is not intended to be used directly from your code.</summary>
    </member>
    <member name="F:Xceed.Chart.Utilities.History.s_sState">
      <summary>This member is reserved for internal use and is not intended to be used directly from your code.</summary>
    </member>
    <member name="F:Xceed.Chart.Utilities.History.s_sStateTarget">
      <summary>This member is reserved for internal use and is not intended to be used directly from your code.</summary>
    </member>
    <member name="F:Xceed.Chart.Utilities.History.s_sTargerID">
      <summary>This member is reserved for internal use and is not intended to be used directly from your code.</summary>
    </member>
    <member name="F:Xceed.Chart.Utilities.History.s_sValue">
      <summary>This member is reserved for internal use and is not intended to be used directly from your code.</summary>
    </member>
    <member name="E:Xceed.Chart.Utilities.History.HistoryCleared">
      <summary>Fired when the history is cleared</summary>
    </member>
    <member name="E:Xceed.Chart.Utilities.History.OperationRecorded">
      <summary>Fired when a single operation is recorded</summary>
    </member>
    <member name="E:Xceed.Chart.Utilities.History.RedoExecuted">
      <summary>Fired when redo is execuded</summary>
    </member>
    <member name="E:Xceed.Chart.Utilities.History.UndoExecuted">
      <summary>Fired when undo is execuded</summary>
    </member>
    <member name="M:Xceed.Chart.Utilities.HistoryOperationStack.GetOperationDescription(System.Int32)">
      <summary>Retrieves a human readable desciption of the operation at the specified index</summary>
      <param name="index">the index of the operation</param>
    </member>
    <member name="M:Xceed.Chart.Utilities.MeasureUnitConverter.#ctor">
      <summary>Initializes new measure units converter.</summary>
    </member>
    <member name="M:Xceed.Chart.Utilities.MeasureUnitConverter.GetScalingToPixels(Xceed.Chart.Utilities.MeasurementUnit,System.Single@,System.Single@)">
      <summary>Return the X and Y scale of the measurement unit in pixels</summary>
    </member>
    <member name="M:Xceed.Chart.Utilities.MeasureUnitConverter.InitFromGraphics(System.Drawing.Graphics)">
      <summary>Initializes the horizontal and vertical scale matrixes depending on the horizontal and vertical resolution of a given graphics.</summary>
      <param name="g">The graphics object which DpiX and DpiY values are to be used.</param>
    </member>
    <member name="M:Xceed.Chart.Utilities.MeasureUnitConverter.InitFromRenderSurfaceDescriptor(Xceed.Chart.Utilities.RenderSurfaceDescriptor)">
      <summary>Initializes the horizontal and vertical scale matrixes depending on the horizontal and vertical resolution of a given surface descriptor.</summary>
      <param name="desc">The surface descriptor object which DpiX and DpiY values are to be used.</param>
    </member>
    <member name="P:Xceed.Chart.Utilities.MeasureUnitConverter.DpiX">
      <summary>Gets the horizontal resolution of the graphics, currently assosiated with the converter.</summary>
    </member>
    <member name="P:Xceed.Chart.Utilities.MeasureUnitConverter.DpiY">
      <summary>Gets the vertical resolution of the graphics, currently assosiated with the converter.</summary>
    </member>
    <member name="P:Xceed.Chart.Utilities.MeasureUnitConverter.Initialized">
      <summary>Determinies whether the convertor has been initialized</summary>
    </member>
    <member name="P:Xceed.Chart.Utilities.MeasureUnitConverter.MeasureFrom">
      <summary>Gets or sets the "From" MeasurementUnit.</summary>
    </member>
    <member name="P:Xceed.Chart.Utilities.MeasureUnitConverter.MeasureTo">
      <summary>Gets or sets the "To" MeasurementUnit.</summary>
    </member>
    <member name="F:Xceed.Chart.Utilities.MeasureUnitConverter.m_bInitialized">
      <summary>This member is reserved for internal use and is not intended to be used directly from your code.</summary>
    </member>
    <member name="F:Xceed.Chart.Utilities.MeasureUnitConverter.m_fXScale">
      <summary>This member is reserved for internal use and is not intended to be used directly from your code.</summary>
    </member>
    <member name="F:Xceed.Chart.Utilities.MeasureUnitConverter.m_fYScale">
      <summary>This member is reserved for internal use and is not intended to be used directly from your code.</summary>
    </member>
    <member name="F:Xceed.Chart.Utilities.MeasureUnitConverter.m_MeasureFrom">
      <summary>This member is reserved for internal use and is not intended to be used directly from your code.</summary>
    </member>
    <member name="F:Xceed.Chart.Utilities.MeasureUnitConverter.m_MeasureTo">
      <summary>This member is reserved for internal use and is not intended to be used directly from your code.</summary>
    </member>
    <member name="M:Xceed.Chart.Utilities.RebindableArrayList.#ctor(System.Type)">
      <summary>This member is reserved for internal use and is not intended to be used directly from your code.</summary>
    </member>
    <member name="M:Xceed.Chart.Utilities.RebindableArrayList.#ctor(System.Type,Xceed.Chart.Utilities.IRebindableParent)">
      <summary>This member is reserved for internal use and is not intended to be used directly from your code.</summary>
    </member>
    <member name="M:Xceed.Chart.Utilities.RebindableArrayList.#ctor(System.String,System.Type)">
      <summary>This member is reserved for internal use and is not intended to be used directly from your code.</summary>
    </member>
    <member name="M:Xceed.Chart.Utilities.RebindableArrayList.#ctor(System.String,System.Type,Xceed.Chart.Utilities.IRebindableParent)">
      <summary>This member is reserved for internal use and is not intended to be used directly from your code.</summary>
    </member>
    <member name="M:Xceed.Chart.Utilities.RebindableArrayList.Add(System.Object)">
      <summary>Adds an object to the end of the list.</summary>
      <returns>The zero-based index at which the <em>value</em> was added.</returns>
      <param name="value">The object to add to the list.</param>
    </member>
    <member name="M:Xceed.Chart.Utilities.RebindableArrayList.AddRange(System.Collections.ICollection)">
      <summary>Adds the elements of an <strong>ICollection</strong> to the end of the list.</summary>
      <param name="c">The <strong>ICollection</strong> whose elements are to be added to the list.</param>
    </member>
    <member name="M:Xceed.Chart.Utilities.RebindableArrayList.Clear">
      <summary>Removes all elements from the list.</summary>
    </member>
    <member name="M:Xceed.Chart.Utilities.RebindableArrayList.Clone">
      <summary>Creates a shallow copy of the list.</summary>
      <returns>A shallow copy of the list.</returns>
    </member>
    <member name="M:Xceed.Chart.Utilities.RebindableArrayList.Remove(System.Object)">
      <summary>Removes the first occurrence of the specified object from the list.</summary>
      <param name="obj">The object to remove from the list.</param>
    </member>
    <member name="M:Xceed.Chart.Utilities.RebindableArrayList.RemoveAt(System.Int32)">
      <summary>Removes the element at the specified index from the list.</summary>
      <param name="index">The zero-based index of the element to remove from the list.</param>
    </member>
    <member name="M:Xceed.Chart.Utilities.RebindableArrayList.RemoveRange(System.Int32,System.Int32)">
      <summary>Removes a range of elements from the list.</summary>
      <param name="index">The zero-based index of the first element in the range.</param>
      <param name="count">The number of elements to remove the list.</param>
    </member>
    <member name="M:Xceed.Chart.Utilities.RebindableArrayList.SetRange(System.Int32,System.Collections.ICollection)">
      <summary>Copies the elements of a collection over a range of elements in the list.</summary>
      <param name="index">The zero-based index at which to start copying the elements of <em>c</em>.</param>
      <param name="c">The <strong>ICollection</strong> that contains the elements that will be copied.</param>
    </member>
    <member name="P:Xceed.Chart.Utilities.RebindableArrayList.Item(System.Int32)">
      <summary>Gets or sets the element at the specified index.</summary>
      <param name="index">The zero-based index of the element.</param>
    </member>
    <member name="P:Xceed.Chart.Utilities.RebindableArrayList.Parent">
      <summary>This member is reserved for internal use and is not intended to be used directly from your code.</summary>
    </member>
    <member name="M:Xceed.Chart.Utilities.TypedArrayList.#ctor(System.Type)">
      <summary>Constructs a new array list with the specified type.</summary>
      <param name="type">type of contained objects</param>
    </member>
    <member name="M:Xceed.Chart.Utilities.TypedArrayList.#ctor(System.String,System.Type)">
      <summary>Constructs a new array list with the specified type and name.</summary>
      <param name="name">the name of the arrya list</param>
      <param name="type">type of contained objects</param>
    </member>
    <member name="M:Xceed.Chart.Utilities.TypedArrayList.Add(System.Object)">
      <summary>Adds a new object to the list.</summary>
      <exception caption="" cref="T:System.Exception">Thrown if value type is different from array list type</exception>
      <returns>index of the added object in the array list</returns>
      <param name="value">object to add</param>
    </member>
    <member name="M:Xceed.Chart.Utilities.TypedArrayList.AddRange(System.Collections.ICollection)">
      <summary>Adds the specified collection to the array list.</summary>
      <param name="c">collection to add</param>
    </member>
    <member name="M:Xceed.Chart.Utilities.TypedArrayList.Clone">
      <summary>Creates an identical copy of this instance.</summary>
    </member>
    <member name="M:Xceed.Chart.Utilities.TypedArrayList.CloneContent(Xceed.Chart.Utilities.TypedArrayList)">
      <summary>This member is reserved for internal use and is not intended to be used directly from your code.</summary>
    </member>
    <member name="M:Xceed.Chart.Utilities.TypedArrayList.ConvertToExponentDbl(System.Single)">
      <summary>Converts the contained values to exponents of the specified base.</summary>
      <exception caption="" cref="T:System.Exception">Thrown if array type is not double</exception>
      <param name="fBase">base to raise on</param>
    </member>
    <member name="M:Xceed.Chart.Utilities.TypedArrayList.FindInt(System.Int32)">
      <summary>Finds the index of the specified value.</summary>
      <exception caption="" cref="T:System.Exception">Thrown if value type is not int</exception>
      <returns>upon success - index of value in array, -1 if the value was not found</returns>
      <param name="nSearchFor">int value to search for</param>
    </member>
    <member name="M:Xceed.Chart.Utilities.TypedArrayList.GetMaxValueDbl">
      <summary>Retrives the max double value contained in the array list.</summary>
      <exception caption="" cref="T:System.Exception">Thrown if array type is not double</exception>
      <returns>max value</returns>
    </member>
    <member name="M:Xceed.Chart.Utilities.TypedArrayList.GetMinValueDbl">
      <summary>Retrives the min double value contained in the array list.</summary>
      <exception caption="" cref="T:System.Exception">Thrown if array type is not double</exception>
      <returns>min value</returns>
    </member>
    <member name="M:Xceed.Chart.Utilities.TypedArrayList.GetObjectIndex(System.Object)">
      <summary>Returns the index of the object in the collection</summary>
      <returns>the index of the object or -1 if the object is not contained in the array</returns>
    </member>
    <member name="M:Xceed.Chart.Utilities.TypedArrayList.LeftShiftItems(System.Int32,System.Int32)">
      <summary>Shifts the objects to the left with one position.</summary>
      <param name="startIndex">start index for the operation</param>
      <param name="itemCount">number of objects to shift</param>
    </member>
    <member name="M:Xceed.Chart.Utilities.TypedArrayList.RightShiftItems(System.Int32,System.Int32)">
      <summary>Shifts the objects to the right with one position.</summary>
      <param name="startIndex">start index for the operation</param>
      <param name="itemCount">number of objects to shift</param>
    </member>
    <member name="M:Xceed.Chart.Utilities.TypedArrayList.SetRange(System.Int32,System.Collections.ICollection)">
      <summary>Sets a range of object contained in the specified collection and the specified index.</summary>
      <param name="index">begin index</param>
      <param name="c">source collection</param>
    </member>
    <member name="M:Xceed.Chart.Utilities.TypedArrayList.SortAscendingDbl">
      <summary>Sorts an array list containing double values in ascending manner.</summary>
      <exception caption="" cref="T:System.Exception">Thrown if array type is not double</exception>
    </member>
    <member name="M:Xceed.Chart.Utilities.TypedArrayList.SortAscendingFlt">
      <summary>Sorts an array list containing float values in ascending manner.</summary>
      <exception caption="" cref="T:System.Exception">Thrown if array type is not float</exception>
    </member>
    <member name="M:Xceed.Chart.Utilities.TypedArrayList.TransposeObjects(System.Int32,System.Int32)">
      <summary>Transposes the objects at the specified indexes in the collection</summary>
      <param name="index1">index of the first object</param>
      <param name="index2">index of the second object</param>
    </member>
    <member name="P:Xceed.Chart.Utilities.TypedArrayList.Item(System.Int32)">
      <summary>Typed array list accessor.</summary>
      <exception caption="" cref="T:System.Exception">Thrown if value type is different from array list type</exception>
    </member>
    <member name="M:Xceed.Chart.Utilities.ValueFormatting.#ctor">
      <summary>Constructs a new instance of the class with the current culture info.</summary>
    </member>
    <member name="M:Xceed.Chart.Utilities.ValueFormatting.Clone">
      <summary>Creates an identical copy of this object.</summary>
      <returns>identical copy of this object</returns>
    </member>
    <member name="M:Xceed.Chart.Utilities.ValueFormatting.FormatValue(System.Object)">
      <summary>Formats the specified number.</summary>
      <returns>string representation of the value</returns>
      <param name="obj">value to format</param>
    </member>
    <member name="P:Xceed.Chart.Utilities.ValueFormatting.CultureInfo">
      <summary>Allows you to localize the value formatting for a specific language and region.</summary>
    </member>
    <member name="P:Xceed.Chart.Utilities.ValueFormatting.CustomFormat">
      <summary>Specifies a custom format string.</summary>
    </member>
    <member name="P:Xceed.Chart.Utilities.ValueFormatting.Format">
      <summary>Specifies the used predefined format.</summary>
    </member>
    <member name="F:Xceed.Chart.Utilities.ValueFormatting.m_CultureInfo">
      <summary>This member is reserved for internal use and is not intended to be used directly from your code.</summary>
    </member>
    <member name="F:Xceed.Chart.Utilities.ValueFormatting.m_Format">
      <summary>This member is reserved for internal use and is not intended to be used directly from your code.</summary>
    </member>
    <member name="F:Xceed.Chart.Utilities.ValueFormatting.m_sCustomFormat">
      <summary>This member is reserved for internal use and is not intended to be used directly from your code.</summary>
    </member>
    <member name="M:Xceed.Chart.Utilities.XmlNodeWriter.#ctor(System.Xml.XmlElement,System.Boolean)">
      <summary>Construct XmlNodeWriter for building the content of the given root XmlElement node.</summary>
      <param name="root">If root contains any content it will be completely replaced by what the XmlNodeWriter produces.</param>
      <param name="clearCurrentContents">Clear the current children of the given node</param>
    </member>
    <member name="M:Xceed.Chart.Utilities.XmlNodeWriter.#ctor(System.Xml.XmlDocument,System.Boolean)">
      <summary>Construct XmlNodeWriter for building the content of the given root XmlDocument node.</summary>
      <param name="root">If root contains any content it will be completely replaced by what the XmlNodeWriter produces.</param>
      <param name="clearCurrentContents">Clear the current children of the given node</param>
    </member>
    <member name="M:Xceed.Chart.Utilities.XmlNodeWriter.Close">
      <summary>This auto-closes any open elements and puts the writer in the WriteState.Closed state.</summary>
    </member>
    <member name="M:Xceed.Chart.Utilities.XmlNodeWriter.Flush">
      <summary>This is a noop.</summary>
    </member>
    <member name="M:Xceed.Chart.Utilities.XmlNodeWriter.LookupPrefix(System.String)">
      <summary>Returns the result of GetPrefixOfNamespace on the current node.</summary>
    </member>
    <member name="M:Xceed.Chart.Utilities.XmlNodeWriter.WriteBase64(System.Byte[],System.Int32,System.Int32)">
      <summary>This method is implemented using Convert.ToBase64String.</summary>
    </member>
    <member name="M:Xceed.Chart.Utilities.XmlNodeWriter.WriteBinHex(System.Byte[],System.Int32,System.Int32)">
      <summary>This is implementd using a temporary XmlTextWriter to turn the given binary blob into a string, then it calls WriteString with the result.</summary>
    </member>
    <member name="M:Xceed.Chart.Utilities.XmlNodeWriter.WriteCData(System.String)">
      <summary>Creates a System.Xml.XmlCDataSection node.</summary>
    </member>
    <member name="M:Xceed.Chart.Utilities.XmlNodeWriter.WriteCharEntity(System.Char)">
      <summary>Writes the given char as a string. The XmlDocument has no representation for character entities, so the fact that this was called will be lost.</summary>
    </member>
    <member name="M:Xceed.Chart.Utilities.XmlNodeWriter.WriteChars(System.Char[],System.Int32,System.Int32)">
      <summary>Calls WriteString with new string(buffer, index, count).</summary>
    </member>
    <member name="M:Xceed.Chart.Utilities.XmlNodeWriter.WriteComment(System.String)">
      <summary>Creates an System.Xml.XmlComment node.</summary>
    </member>
    <member name="M:Xceed.Chart.Utilities.XmlNodeWriter.WriteDocType(System.String,System.String,System.String,System.String)">
      <summary>Creates an System.Xml.XmlDocumentType node.</summary>
    </member>
    <member name="M:Xceed.Chart.Utilities.XmlNodeWriter.WriteEndAttribute">
      <summary>Closes the previous WriteStartAttribute call.</summary>
    </member>
    <member name="M:Xceed.Chart.Utilities.XmlNodeWriter.WriteEndDocument">
      <summary>Closes any open elements and puts the writer back in the Start state.</summary>
    </member>
    <member name="M:Xceed.Chart.Utilities.XmlNodeWriter.WriteEndElement">
      <summary>Closes the previous WriteStartElement call.</summary>
    </member>
    <member name="M:Xceed.Chart.Utilities.XmlNodeWriter.WriteEntityRef(System.String)">
      <summary>Creates a System.Xml.XmlEntityReference node.</summary>
      <param name="name">The name of the entity reference</param>
    </member>
    <member name="M:Xceed.Chart.Utilities.XmlNodeWriter.WriteFullEndElement">
      <summary>The DOM does not preserve this information, so this is equivalent to WriteEndElement.</summary>
    </member>
    <member name="M:Xceed.Chart.Utilities.XmlNodeWriter.WriteName(System.String)">
      <summary>Calls WriteString if the name is a valid XML name.</summary>
    </member>
    <member name="M:Xceed.Chart.Utilities.XmlNodeWriter.WriteNmToken(System.String)">
      <summary>Calls WriteString if the name is a valid XML NMTOKEN.</summary>
    </member>
    <member name="M:Xceed.Chart.Utilities.XmlNodeWriter.WriteProcessingInstruction(System.String,System.String)">
      <summary>Creates a System.Xml.XmlProcessingInstruction node.</summary>
    </member>
    <member name="M:Xceed.Chart.Utilities.XmlNodeWriter.WriteQualifiedName(System.String,System.String)">
      <summary>Looks up the prefix in scope for the given namespace and calls WriteString with the prefix+":"+localName (or just localName if the prefix is the empty string).</summary>
    </member>
    <member name="M:Xceed.Chart.Utilities.XmlNodeWriter.WriteString(System.String)">
      <summary>Creates a System.Xml.XmlText node. If the current node is already an XmlText node it appends the text to that node.</summary>
    </member>
    <member name="M:Xceed.Chart.Utilities.XmlNodeWriter.WriteSurrogateCharEntity(System.Char,System.Char)">
      <summary>Calls WriteString with the character data.</summary>
    </member>
    <member name="M:Xceed.Chart.Utilities.XmlNodeWriter.WriteWhitespace(System.String)">
      <summary>Create a System.Xml.XmlWhitespace node.</summary>
    </member>
    <member name="M:Xceed.Chart.Utilities.XmlNodeWriter.WriteRaw(System.String)">
      <summary>WriteRaw writes out the given string "unescaped", in other words it better be well formed XML markup. So for the XmlNodeWriter we parse this string and build
the resulting tree, so it maps to setting the InnerXml property.</summary>
    </member>
    <member name="M:Xceed.Chart.Utilities.XmlNodeWriter.WriteRaw(System.Char[],System.Int32,System.Int32)">
      <summary>Calls WriteRaw(string) with new string(buffer, index, count)</summary>
    </member>
    <member name="M:Xceed.Chart.Utilities.XmlNodeWriter.WriteStartAttribute(System.String,System.String,System.String)">
      <summary>Creates a System.Xml.XmlAttribute node.</summary>
    </member>
    <member name="M:Xceed.Chart.Utilities.XmlNodeWriter.WriteStartDocument">
      <summary>Writes the XmlDeclaration node with a standalone attribute. This is only allowed when the writer is in the Start state, which only happens if the writer was
constructed with an XmlDocument object.</summary>
    </member>
    <member name="M:Xceed.Chart.Utilities.XmlNodeWriter.WriteStartDocument(System.Boolean)">
      <summary>Writes the XmlDeclaration node with a standalone attribute. This is only allowed when the writer is in the Start state, which only happens if the writer was
constructed with an XmlDocument object.</summary>
      <param name="standalone">If true, standalone attribute has value "yes" otherwise it has the value "no".</param>
    </member>
    <member name="M:Xceed.Chart.Utilities.XmlNodeWriter.WriteStartElement(System.String,System.String,System.String)">
      <summary>Creates a System.Xml.XmlElement node.</summary>
    </member>
    <member name="P:Xceed.Chart.Utilities.XmlNodeWriter.WriteState">
      <summary>Return the current state of the writer.</summary>
    </member>
    <member name="P:Xceed.Chart.Utilities.XmlNodeWriter.XmlLang">
      <summary>Return the current XmlLang state. This does not have an efficient implementation, so use at your own risk.</summary>
    </member>
    <member name="P:Xceed.Chart.Utilities.XmlNodeWriter.XmlSpace">
      <summary>Return the current XmlSpace state. This does not have an efficient implementation, so use at your own risk.</summary>
    </member>
  </members>
</doc>